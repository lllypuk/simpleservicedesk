// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd32/cNvL/Vwh9vw8JsBfbaXtA/ZaLrwcDxTVoWtxDERi0NLvLViJVknK6V/h/P5DU",
	"D1KiJGq9u9I2+xLEK4k/hvOZGc5nRP0ZxSzLGQUqRXT7ZyTiLWRY//edEGRDfyLxbyB/hN8LEFL9nHOW",
	"A5cE9E1Y3wTwQBL1ZwIi5iSXhNHotmwBAN3foVe0SFMkGSqoeeZ1tIrWjGdYRrdRUZAkWkVyl0N0GwnJ",
	"Cd1Ez8/1L+zxV4hl9LyK3nPAEt5jCRvGd73jcgbSHlf1NLJ/XkUZ/uN7oBu5jW6/ub7ujGYVUZzBQGv6",
	"stPMjWomI7T6+62nUcY3mJL/YtWaV4o/WDeg+7txsa2iHHOg0tvaB30JxdWg1dIwfRGnYUvC4feCcEii",
	"21+icsrtOXwKWDiRMyqgu3K+QZtnE3vUL9IelmVAB5S6kFvGveIrH0XmlsDliBmVQGV/a9UNjvK8vW5p",
	"z42naSIeCJXAKU5N82tcpDK6XeNUwKrV3X15J4rLftcp3jQDfmQsBUw7i9yMrhFM/wrb6toPT5ZhQkd0",
	"3dzkqmcgJp129sPlOIaYC8wX4yhUpvsgh001Iv3oOZhHmCCu1RAm3xksvuJmSMBfh+KyNCd+pO9pIVfD",
	"vsdIb9DzXJ/KS3DCOJE71dj/c1hHt9H/XTXhwFUZC1yZIX+o7laaQWQKvXMzV9u2zAHcV2OAqNpw5VSP",
	"uCuQMONU6e4+EJJmdi8Dz88CeC90IMNEm/G6efPLgNnzmC0hPjOu52EJ/O+BnrzqsG7m08hUhiW5h5z+",
	"yTkbaDcDIfDGN3dfY/8COR5xxGaBH7B0hpxgCX+TRItlDONdvxwyfe2+cSzJkz2f2g0PrLLHHEwLCkfv",
	"LvJkolB65B/mu/ZagzqIOLX4ZxLlmPVqud5pPnWqtxy/P2Vi4orOiMS9ELW3A+UgWPo0caZCYlmIsM4+",
	"mnttX308vRz2BBO8WqDce3DpG933RFQegIAYsD/1Pdp5SchGBe3zLc0QMOd41z8m2yoODMvWykkj81rd",
	"zuiUJdsQiivwDDX6ob6zaa9vdkYHB+b1sm6VUusOpkikZTyDV0op9xFnUqjmp8zDAVvQLDwdd6axxeKB",
	"wh+eHMV/tiC3wJH6BxDmgDLGAeV4A8KTO1hFKcmIp517NT+UA9ePNk8SKmEDvFRGX36t4Hq7ra4iWmSP",
	"wL1PSyarJIizKVE/l88htkZGzt0GfJIzOlNmaUbyRFOyQJ0sz0E8YXjQ46aMBlNEryiT6IkI8pgCkgzF",
	"hZAsAy5eexffAPNh7+i/5Sr7tpiV50UpPIFyJUCLTG1jUvY5WkVUdax+3pLNNlLSJJLEOLV2M408HIfZ",
	"12Hpe5uOKKiOCH3IOdtwEOraZ0ykarTx71EVBnl7/lk74Hly2U7o29OkuaGZe3+EfNCM+KTs9X6bcSP5",
	"Q6cqo2lydlrYV9ZzZDpfIvOR7GFoSm6uPNzScmaDUjY2rVfW++wnWlmjsolPvQMJy3e5IlHPoGqPEJ4K",
	"8zRS4iFYbHq0LIXeEXNm1nBIYFUjHWHph72iqp7wz0I9hwhVERgSOyEhs/xQ5Y+jVYQ3JUuTZIR6HI4a",
	"D6FrprdORhujjyTLU/gI/InEcAfiN/Tuw320ip6ACzOE6zfXb270DjkHinMS3UZfvbl5c6OThHKrxXLl",
	"bp824In/fgTJCTyB0PPYEuCYx1vllZHkoCwfL2JZcFBBmtWe7phr03OfRLdWSs9czTHHGUgdRf/S7vQ7",
	"kkrg6HHnMWHKqEe/F8B3UaVEnqyyWdWgaKa/89xDumo+fM3U8jJpTfh1z9AaK32gQbU9jq/TxnvZnXb5",
	"wm4YGadFAijekjSxJlepMa82Ij3dmscf9OMcqNN7zXFKXoCHvPykwy/dvNbGt9fX2rM04TfO85TEepGv",
	"fhXGOzTtD2G7J52goeX1VWrOrnorKH19wCG5+XLPSO7pE05JgrSMkQWX51X0zWkHUu4tBPAnZeLVA9pK",
	"iiLLMN8ZdNvqokSntBpvhDZ2DfA/KWfMhOzjaxBGFD43kPtM5FarXs7ZE0kgQQlITNKugfnAhGthSl7x",
	"HyzZHUxY/jKWZ9dlKAV/7mjzzdEGMarNOySKOAYh1kWa7lC5SZ1NownNC4kSLLEZwtenG4ITdjPesfBq",
	"17xmBS2F8+3pRva+pfFE6DAI4ZQDTnYI/iBC1obYdniLNAheNPeZhOeVHYpc/UmSZ2MfUpCe6OpO/24C",
	"kq6hEDnEZE0gMeGCayTMo42ZuE/GQhF386K9noqfLKeXRG3wT/H0Xbf39cAOysGxkc98OLbjIsabP7dY",
	"oARyoAnQWK3wqVH+3gvnxWHEKCPCo/hYjYXmcZNN0s4RFYLQjQuQ+7vGh5ZWpFTkgUBdK/3C8HG4VfRS",
	"QQPqVEnXQSEvV2EROPwSofYdJikkSDK0aaLQnSdAbYCm9lFaX/si1MIDN5Nr6HM74/FpIRfndw4fIPtz",
	"40EB8ny4dvBc0usLiI61UyU8LlLMEYc1cKAxKAWDuB7h7FhfYJS8SG9vkBHg7T3R8JVFnI+EAjhNy5JH",
	"gR4hZXSjIwHWio2tQQy5/6QsCZjbWg3kw2SL6fMlpuqLYevdzp2Pdm4VuHpzgM3lKQNoaIj+TF211GvO",
	"MiSKRycDO5Sja9/rSdSVLyOMpw0/NBS/To1axRV9SdEN+Pu80dwJyYrMfnHCYvvbff/brRCwKxV8PZsq",
	"B2/Xb681j1P2XbI4/SM5dr6yXYzjMTvqNjXzSgnKsL4JgZaxMfRlMC/7QX8S1VrKME/RKTUb8w8oLbXG",
	"edI41Op9CbTWFk55DkwTF88dd+HUxO3J7Ggn/irHXBKcogzLeNtHqJTkYIfWCPEVzEv++3qpL+7VzzE5",
	"mg49FUaRHYiHupj6I5h6f1XpgMF3QX9hpgaMqhFZ19Q5iltZV1eugVyVg79pfFXbdB6PsvLVTM1CW/kr",
	"nEeYmkXTV9/ORF+1tsCMV2/ensFmuBdAA2DsRDuTiCI/SgPIIgej43m7H/ze+PScUT+A5uaN2i9gM+7+",
	"NDt/5BZnngWHRENRNMoluTFyh09qL14op+TC6G6ZMDpoCnovT7dQiqm9x/hCEelSTW4RRpducjHZ4Zw8",
	"weYY7bRvqFnIpXqxYzFQe8e785uAhbJRC8L8JeZ+CQFFXxZwH56Lag1nJHQIpaROYcIutNQlPbhkJqhd",
	"JrqU7d7sjNAZ7fDarNBLzXf95nqA8db3HtB065fyF2m4L4brCIbLPYNhwGwZPVuw0boYqGEDVS/gNPM0",
	"IZSsaevKFvYR1o+7Muha1fHPqmbSV6g6bGmlme0x+xUYa37pYV8zhLhbCNbq3n5V/FCvRDbHU/Z0ah+x",
	"daBOZ30z1T7H1jvf+oiTi1c8/3D+wvCPMvyOVxioXqq8USXZQI6/tKzT2P3GeRyP13fP5ZiF0W+f0NVd",
	"xeownstLqG45Ypv4XHac5wGEF1BWYDeJoW9jLICbLxE2zmf8ZB0CPBMf7wPB3Ex8czbyqTFQSuNMXtAc",
	"0PZRPl1WJxa1mfRa+MEceqXud0tT94OSZsH+ZKFc+RcMKpcfL1HjexGzlFGbEneisjEyfHpMVsglOYxj",
	"Ud97hITz4PdCdJ+RL6xfX5wQ+V2ZtIs5b1fG274Pi4jGIkiGMEX6SDQVHldfnRJIb+5beFZt1og2Tf0l",
	"ce37pNeCcW2WTB9DuyiIW2lCpVvzI57xZkzLRr/RQBuRk+xAeSpxKO1Y3a5zju5WsO61NzhO3ledzWoK",
	"et/YJa2jmgV6pU9+vCqNHk13r0fe3a3PgZ702u5Lw/agk87do7e755yPpDproVyi96VXIzRLNSWr+i5J",
	"RHUqWHlUeaeooAfjVkp1KSD/dNRTBt3PHZ44t9sCsieLWS7fJat7RvB9lyQI28ibFs83R0/3xPP2/tzc",
	"rG17a7duDmdGkmMqiM5869Xzs/BulP+x4s7/2rt39wjwJe/hzSIvKs4vx2Sp1yKi/bPY37frV/xGIbiG",
	"sK7aMQVC+x8yEVQ52NRHFNUx8ic4VKKoz70P7Kw6En//3vSR9P7Gy0uBJsc6835RlS6XwpPZyzEvRSej",
	"RSeWUQsoOTFSDSw40TDvUhvmsDua1N/Z6G6RKkt5vI2J/XGQWSpO3G+pdRdQf37jcmaEJYxzOxJCqb8H",
	"OnXsMamwxMVSQFmJhtA4R6glO2dJSVfP5y4oKYxIdKJY/Xf2oxzM94TOo8qkR+lHK0y0pLv1JdVahFaX",
	"GK2/W5bWH3RXG+Q3FlpVUq7mlwYgt6JEI8RXT6Kl064msQKusVqSnnBroJJkKT7iWHmoyUHe6ZF6qR/p",
	"g+jpA8zmYASTCTmnA7mDgs2r6huCAZlv/eW/Mu/dhJtlN57sdmlLfjSpm7+wPbG+0bhQm6KXblGGxSgT",
	"/1IDgAlItlOjI2AOf/G0erEIC8FiojTBt5XUXb8qswwmZ1qV9qjg5XV/vB16nMkxgX85xqR3CBxS88by",
	"luQqCi2NuDfzbt3qzwdHOLU/em5e0oxW9dup6r+p72vnlwT50t7M1ICf+/VMK9sy+4kqZ+AmqoMK6nXz",
	"uInn5/8FAAD//wk4J2pblwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
