// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SU32/TMBDH/xXr4LFqOzaQyBswmCrxMG3iadqDF19Tj8T27i4dVdX/HdnOfoRkA6RR",
	"3hLb9+t797ktlL4J3qEThmILXK6w0enzE6EW/MZIZ3jTIks8DOQDklhMT7DRto4fS0+NFii6kwnIJiAU",
	"wELWVbCbgNMNxpeDi6CZbz2ZeNlY9xVdJSso3g187CZAeNNaQgPFRXY4uQ947+by3tBfXWMpMcbjUjh4",
	"xzisxZpeIW1rDYzlMHD+mcg/47dBZl2N1T7m7ATl+TT/QvI/qujJzgyzi0fWLX16bKWOd+e2CTWeI61t",
	"icfI39WH0wVMYI3E1jsoYD6dTw9iHB/Q6WChgMPpfHqYeiarVNSsZaT0FXyeM4Nckg2SfeT+Ka0c3qr4",
	"Vt1aWSlZoQrk19agUbEMpZ1Rd3pE1XR0sDBQwKnnpCxDHiNk+ejNJsYqvRN0KawOobZlsppdc4x9h0T8",
	"ek24hAJezR6YmXXAzIa07PoTK9RiOsidTdW+mR/8kwS64UkZ9JWM94rbskTmZVvXG1UmOxM7dDSfv1g6",
	"fSpGMlm4ta6tUdaFVpTRonMK7/eXQhJD14TabBT+sCwcc3i7XxkEyelaMdIaSWE0SPRx2zSaNmPjHzHW",
	"Fcc1mMm5jAaZotnWml1Mq8IRks5QyOIaOWNkULSt4491VeIpHS+OH7iyLnOmZTWAqttWvDCJZtINSgL5",
	"Yjsm9eIY4gaBAjpvefVA2kt9UiaP9P3dTr4cUPVy/ft1Hz81RXdC9tCiTuz/B1fXzRz/aM9kOS9q6Vtn",
	"9g7VF21rNEq8qlAyMX2iTlCUzupcbfJcDoDa7X4GAAD//+xw458dCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
