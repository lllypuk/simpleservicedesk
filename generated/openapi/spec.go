// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+deWAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
