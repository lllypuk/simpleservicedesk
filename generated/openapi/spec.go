// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
