// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SUS28TMRDHv4plOEZJSgsSewMKVSQOVStOVQ/uerKZsmu7M7MpUZTvjmxvH8tuC0gl",
	"3Pycx3/mN1td+iZ4B05YF1vN5Qoak5afCIzANwY6g5sWWOJhIB+ABCE9gcZgHRdLT40RXXQnEy2bALrQ",
	"LISu0ruJdqaB+HJwEQzzrScbLxt0X8FVstLFu4GN3UQT3LRIYHVxkQ1O7h3em7m8/+ivrqGU6ONxKhy8",
	"YxjmgraXSNui1WMxDIx/JvLP2G2A2VRjuY8ZOwF5Psy/kPyPMnqyMsPo4hG6pU+PUep4d45NqOEcaI0l",
	"HAN/Vx9OF3qi10CM3ulCz6fz6UH04wM4E1AX+nA6nx6mmskqJTVrGSitgs99ZoFLwiDZRq6fMsrBrYpv",
	"1S3KSskKVCC/RgtWxTSUcVbd6RFVM9HAwupCn3pOyrLObQQsH73dRF+ldwIuuTUh1FimX7Nrjr7vkIir",
	"1wRLXehXswdmZh0wsyEtu37HCrWQDnJlU7Zv5gf/JICueVIEfSXjveK2LIF52db1RpXpn40VOprPXyyc",
	"PhUjkSzc2tRoFbrQirJGTA7h/f5CSGKYmsDYjYIfyMIxhrf7lUGAnKkVA62BFMQPiT5um8bQZqz9I8am",
	"4jgGMzmX8UOmaLZFu4thVTBC0hkIIayBM0YWxGAdN+iqxFM6Xhw/cIUuc2ZkNYCqm1a8OE40k2lAEsgX",
	"2zGp0zOM285aHj06zaU+KZNH+v5uJl8OqHq5+v06j5/qojshe2hRJ/b/g6urZvZ/tGeynBe19K2ze4fq",
	"i8EarBKvKpBMTJ+oExBlsjpXm9yXA6B2u58BAAD//+Bl/ysdCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
