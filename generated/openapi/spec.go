// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdX2/jNhL/KoTuHhLAt0m23QOat73d6yFAcQ26V9xDsQgYaWyzlUiXpLL1FfnuB5L6",
	"Q0qURDm2JW/8sthYFP8M5zcznBmO/oxilm0YBSpFdPtnJOI1ZFj/970QZEX/Q+LfQP4Ev+cgpPp5w9kG",
	"uCSgG2HdCOCBJOrPBETMyUYSRqPbogcAdPcRXdA8TZFkKKfmnctoES0Zz7CMbqM8J0m0iOR2A9FtJCQn",
	"dBU9P1e/sMdfIZbR8yL6wAFL+IAlrBjfds7LmUhzXuXbyP55EWX4jx+AruQ6un13fd2azSKiOIOe3vRj",
	"p5sb1U1GaPn3W0+njK8wJf/DqjcvFX+0GqC7j8NkW0QbzIFKb2/3+hGKy0mrrWH6IU7DtoTD7znhkES3",
	"v0TFkptr+BywcWLDqID2zvkmbd5N7Fm/iHtYlgHtYepcrhn3kq94FZkmgdsRMyqByu7eygYO87y9bnDP",
	"jadrIh4IlcApTk33S5ynMrpd4lTAojHcXdESxcW4yxSv6gk/MpYCpq1NrmdXE6Z7h2127YYnyzChA7xu",
	"GrnsGYhJp5/dcDmMIeYC88U4CqXpLshhY4VIN3r2phFGkGvRh8n3BosX3EwJ+GUoLgtx4kf6jhJy0a97",
	"DPV6Nc/1sbQEJ4wTuVWd/ZXDMrqN/nJVmwNXhS1wZaZ8X7ZWnEFkCp1rM0+bsswB3DdDgCj7cOlUzbhN",
	"kDDh9LMA3sm5kGGipWhFOfNLj9TxSA0hvjCuN8ha798DFWk5YNXN0FL6ZcEOGP8n56yn3wyEwCvf2n2d",
	"/QvksMKPjYh6wNKZcoIl/E0STZYhiLXVYsjytfbEsSRP9noqLdizyx40jrPJBlvnm2QkUTroH6Y6dtqD",
	"Socfm/wTkbJUfF1EbGi+cSptrLIabp8yMXJHJ0TiTojaWX9xECx9GrlSIbHMRdhgn0xbW1Ueji/7NcEu",
	"mzpCE85Q0nJmKN63TZpmqt3eNuIHIkplR0D07EfVRutpCdkgT/nUaD0FzDneds/JVgA907IJPWpmXgXT",
	"mp0S2itCcSkn+jq9r1rW/XWtzsCtZ10vG1bhVw8whiINPRG8U4onD7iSXHU/Zh2OXAlahWfg1jLWWDxQ",
	"+MPjDfnvGuQaOFL/AMIcUMY4oA1egfB4KRZRSjLi6edOrQ9tgOtX6zcJlbACXjCjz5OXc32wV08RzbNH",
	"4N63JZOlu8U5/qifi/cQWyJD53YHPsoZnin8QQMeqTH+ppY/aS9KP1zou86pXmfUBWUSPRFBHlNAkqE4",
	"F5JlwMWld/MNMB92Pug0rIKuw2xpZKAUnkBpQKB5pk5sKfsSLSKqBlY/r8lqHSlqEklinFoHt5oejm3Q",
	"NWBhZtQDUVADEfqw4WzFQahnXzCRqtPalIlKi8878s9axU3jNXdUf0eXpkG99m4LYa++91F+8t18Zoby",
	"+3aKRuPo7PSwK62n8Km+hOYDfspQ599UHr+5eed6qWxkWietdzk6NRxkRRefOycS5tpzSaLeQeXRpnXW",
	"sSn07l1IKKYLf3qcXXGnX27jLWRKg15j3fceMVceqzo3YtzZrMED+mUvB5Rv+Beo3kOEKsMSia2QkFnq",
	"tTQzokWEV0WYK8kI9ehRNR9Cl0yfVA3Iok8k26TwCfgTieEjiN/Q+/u7aBE9ARdmCtdvrt/c6N3YAMUb",
	"Et1G37y5eXOj3bxyrcly5Z4KV+Axa38CyQk8gdDrWBPgmMdrZWwgyUExFs9jmXNQtqfVnx6Y6929S6Jb",
	"yylrnm4wxxlIfTj4pTno9ySVwNHj1sMlSldFv+fAt1HJux63vNnVICOte/CNJ2qtEwqWTG0vk9aCLzum",
	"ViufPU2qCWjfoLVQsAdtB1zb1nGc5gmgeE3SxFpcyca8PF91DGtef9Cvc6DO6FWQWPIcPNHfz9qq1N1r",
	"bnx7fa0VZn2qwJtNSmK9yVe/CqP06v77sN3hJdHQ8qpgtWaXvRWUvt3jlNyIh2cmd/QJpyRBmsbIgsvz",
	"Inp33IkURyYB/ElpLvWClpIizzLMtwbdNrso0imuxiuhhV0N/M/KxmBCdsWMEUYUvtSQ+0LkWrPehrMn",
	"kkCCEpCYpG0Bc8+EK2GKwOw/WLLdG7H8eUDPrspQDP7c4uabg01ikJu3SORxDEIs8zTdouLsPRlHE7rJ",
	"JUqwxGYK3x5vCs5pgvGWhKdMoiXLaUGc7443sw8NjidCW18IpxxwskXwBxGyEsS2wpulQPCiuUskPC9s",
	"U+TqT5I8G/mQgvRYVx/178YgaQsKsYGYLAkkxlxwhYR5tRYTukmvKeKeybTWU/aTpfSSqAn+MZq+rfa+",
	"7TkYOjg29JkOx7ZdxHj95xoLlMAGaAI0Vjt8bJR/8MJ5dhgxzIjwID4WQ6Z5XDvJtHJEuSB05QLk7mOt",
	"QwspUjByj6E+R3zsbxe9Ea4ediqp66CQF7swCxy+Rqh9j0kKCZIMrWordOsxUGugqXOU5tcuCzX3wM34",
	"GrrUzrB9ms8PV/s3kP0u/yADeTpcO3gu4vIzsI61UiU8zlPMEYclcKAxKAaDuJrh5FifoZU8S21vkBGg",
	"7T3W8JWVDzBgCuA0RUVr9AgpoyttCbCGbWxNolf9F5kOU0urHn+YbAQwfY6p6mHYfjdDAoODWxnCXh9g",
	"/XjMBOroSrenrtzqJWcZEvmj44Ht89E123ocdcVtjmG34X2duaBdo1bOSJdTdAX+MW90dIFkeWbHFqwk",
	"hubY/3YTH+wEDN/IJnnDO/Tbax3pKMYuglPdMzm0v7KZY+QRO6qZWnnJBIVZX5tA8zgY+jyY5/Og34lq",
	"bWWYpmhl0A3pB5QWXOO8aRRqeeEELbWEU5oD08TFc0tdOKl+O0Z2tBK/2GAuCU5RhmW87gqoFDHJVlgj",
	"RFcwb06Db5Tq4U7jHDJG0wpPhYXI9hSHOov6A4h6f7Jsj8B3QX+OTPUIVUOytqhzGLeUri5dA2NVDv7G",
	"xauaovNwIStfKtgkYSt/4vZApGbW4avvJgpfNY7AjJdXl0/gMNwJoB4wtqydUYEiP0oDgkUORof9dj/6",
	"tfHxY0bdAJo6btS8wc4ayWCTx4/cnNOTiCHRUBQNxpJcG7kVT2puXmhM6SRgtFcX9E6abqYhpuYZ45Ui",
	"0g01uUkY7XCTi8lWzMljbA6FnXY1NfPZwu9QEaid7d3pRcBMo1EzwvzZ5n5JAIq+zODefyyqMZ0h0yEw",
	"JHUMEXYOS53dg3OOBDXTROdy3Js8InRCJ7xmVOil4ru6kB8gvHXbPYpuXWtgloL7LLgOILjc0hI9Ysvw",
	"2YyF1llA9QuoagPHiacRpmQVti5lYVfA+nFbGF2Lyv5ZVJH0BSrLZS10ZHtIfgXamq/d7KunELcTwRrD",
	"2zfg93Ulsq7v2TGoXSRtT4NOejPVLgTsXW9VueWsFU/fnD9H+Acj/I5W6MleKrVRSdnAGH8hWcdF92vl",
	"cbi4vltu5MgRfU/VsfYWlgWGzjdQ3VzEZtRz3kaeBw1eNFlW3ajwfBNgAYH5Al7DwYyCA6cMxvtAMHUY",
	"XlZkOTYGCmqcyO3MHm4fDKbLsgpTM4xeET84gD5bdr+eRJ/MNFD+ikHlBscL1PhuYRY0asbDHZNsKBI+",
	"3iDLZ4WgQ8W9d7AHr6e3B19xlPskdGF1d3GE5XdlfC6mhrCM112fZRG1RJAMYYp0PTRlHpff7BJIn+wb",
	"eFZ9Vog2XX2VuPZ9EG3GuDZbpkvrzgrilo9Q8db0iGe8ntO80W840EbkKDlQVFoOjTmWzbXD0T0KVqN2",
	"G8cfysEmFQWd13VJo/y0QBe67ONVIfRour0cuLhb1bYedWf3pWZ7UPV2t5x4u3b7gJ+zIsrZep97KkK9",
	"VWNcqu+TRJQlwYry662Mgg6MW/7UuYD880FLDLofizyyY7cBZI8Xs9i+s1f3hOD7PkkQtpE3zp6vy2l3",
	"2PP2+dw01rK9cVo3lZmR5JgKoj3fevf8IXjXyv9UBs6/7tO7W9Z8zmd4s8mzsvOLOVnsNQtr/yTO983k",
	"Fb9QCE4grFJ2THbQ7hUmgtIG6+SIvCxdf4SKEnlVyz9wsLLM/+6j6Xr0/s6LR4Eixyp4P9M0l9z3BYN9",
	"FtM4J7hMnvZ5Tm4ZTG6x5GdAaouhamBii0ZYO4piiurRpPpMSfs0Vgrlw52B7G+rTFKrwv0UXXsD9Wc+",
	"zrUp7K/NnFjpCcX+HuhUZs6oHBYXSwEZLBpCw+FITdkps1fafD517kpuSKJ90uq/k5eMMJ9LOo2Elg6m",
	"H0xm0ZRup7KUexGayDJLrt/rATpIb8w0gaXYzdcGIDd5RSPEl7qiqdNMXLEMrqG0lQ5zqydpZS5oOZTL",
	"a7SRd3yknlNVuiB6fAOzLsBgnC6nVPg7yNi8Kr9VGOBk118YLFzstblZDONxpBey5CfjJfqK5Yn1LciZ",
	"yhS9dbMSLIaZ+Gs1AEYg2fbCDoA5/IJreYEJC8FiojjBd5TUQ18UXgbjni2ziJTxctljbwdeZT0k8M/l",
	"UjqnwCE1N6PXZKOs0EKIe538VlO/PzjCqf3NeHMZNFpUt2DVf1Pfx+LPDvK53QDVgJ/6GqjlbZm8cssJ",
	"qImyIEK1bx418fz8/wAAAP//E2C9EwSZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
