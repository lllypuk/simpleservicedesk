// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SUQXPTMBCF/4pm4ehJUloO+AYUOrl12uHU6UG1NomKLam765RMxv+dkeTSuk4DzJRw",
	"k2Vp9fT0vt1C5ZvgHTphKLfA1QobnYafCbXgN0a6wLsWWeJkIB+QxGJago22dRwsPDVaoOxnCpBNQCiB",
	"haxbQleA0w3Glc9+dAUQ3rWW0EB5lVcVfZXrX2X8zS1WEss8FcXBO8axKmsGktrWmrGibkfxL0R+T90G",
	"mfXyhVuMip2h7Jf5F+b90Y32efxMXZyybuHTYit1/Hdpm1DjJdLaVniK/F19PJ9DAWsktt5BCbPJbHIU",
	"z/EBnQ4WSjiezCbHUEDQskqXmraMlEbB58QY5IpskFwjv5/SyuG9imvVvZWVkhWqQH5tDRoVr6G0M+rB",
	"j+iajgXmBko495ycZcjZQZZP3mziWZV3gi4dq0OobZV2TW85nv0Q7jh6S7iAEt5MH9M/7aM/Hee+G8ZU",
	"qMU0kV823fbd7OifCOjDkxQMnYz/FbdVhcyLtq43qkr7THyhk9ns1eQMqdihZO7WurZGWRdaUUaLzhI+",
	"HE5CMkPXhNpsFP6wLBw1vD+sDYLkdK0YaY2kMG5I9HHbNJo2u+IfMdZLjr0vk3MdN2SKpltruihriTtI",
	"ukAhi2vkjJFB0baOH9YtE09pen76yJV1mTMtqxFUfbfiuUk0k25QEshX211Wz08hdhAooa+WWw+kvjQk",
	"pXji7+968vWIqtd7v+f9+KUUPRg5QIt6s/8fXP1r5vNPDkyW86IWvnXm4FB91bZGo8SrJUomZkjUGYrS",
	"2Z2bTc7lCKiu+xkAAP//9Dp5vOcIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
