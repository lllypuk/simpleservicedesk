// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get categories tree
	// (GET /categories)
	GetCategories(ctx echo.Context, params GetCategoriesParams) error
	// Create a new category
	// (POST /categories)
	PostCategories(ctx echo.Context) error
	// Delete a category
	// (DELETE /categories/{id})
	DeleteCategoriesID(ctx echo.Context, id openapi_types.UUID) error
	// Get a category by ID
	// (GET /categories/{id})
	GetCategoriesID(ctx echo.Context, id openapi_types.UUID) error
	// Update a category
	// (PUT /categories/{id})
	PutCategoriesID(ctx echo.Context, id openapi_types.UUID) error
	// Get tickets in a category
	// (GET /categories/{id}/tickets)
	GetCategoriesIDTickets(ctx echo.Context, id openapi_types.UUID, params GetCategoriesIDTicketsParams) error
	// List organizations with pagination
	// (GET /organizations)
	GetOrganizations(ctx echo.Context, params GetOrganizationsParams) error
	// Create a new organization
	// (POST /organizations)
	PostOrganizations(ctx echo.Context) error
	// Delete an organization
	// (DELETE /organizations/{id})
	DeleteOrganizationsID(ctx echo.Context, id openapi_types.UUID) error
	// Get an organization by ID
	// (GET /organizations/{id})
	GetOrganizationsID(ctx echo.Context, id openapi_types.UUID) error
	// Update an organization
	// (PUT /organizations/{id})
	PutOrganizationsID(ctx echo.Context, id openapi_types.UUID) error
	// Get tickets in an organization
	// (GET /organizations/{id}/tickets)
	GetOrganizationsIDTickets(ctx echo.Context, id openapi_types.UUID, params GetOrganizationsIDTicketsParams) error
	// Get users in an organization
	// (GET /organizations/{id}/users)
	GetOrganizationsIDUsers(ctx echo.Context, id openapi_types.UUID, params GetOrganizationsIDUsersParams) error
	// List tickets with filtering and pagination
	// (GET /tickets)
	GetTickets(ctx echo.Context, params GetTicketsParams) error
	// Create a new ticket
	// (POST /tickets)
	PostTickets(ctx echo.Context) error
	// Delete a ticket
	// (DELETE /tickets/{id})
	DeleteTicketsID(ctx echo.Context, id openapi_types.UUID) error
	// Get a ticket by ID
	// (GET /tickets/{id})
	GetTicketsID(ctx echo.Context, id openapi_types.UUID) error
	// Update a ticket
	// (PUT /tickets/{id})
	PutTicketsID(ctx echo.Context, id openapi_types.UUID) error
	// Assign or unassign ticket
	// (PATCH /tickets/{id}/assign)
	PatchTicketsIDAssign(ctx echo.Context, id openapi_types.UUID) error
	// Get ticket comments
	// (GET /tickets/{id}/comments)
	GetTicketsIDComments(ctx echo.Context, id openapi_types.UUID, params GetTicketsIDCommentsParams) error
	// Add a comment to a ticket
	// (POST /tickets/{id}/comments)
	PostTicketsIDComments(ctx echo.Context, id openapi_types.UUID) error
	// Update ticket status
	// (PATCH /tickets/{id}/status)
	PatchTicketsIDStatus(ctx echo.Context, id openapi_types.UUID) error
	// List users with filtering and pagination
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Delete a user
	// (DELETE /users/{id})
	DeleteUsersID(ctx echo.Context, id openapi_types.UUID) error
	// Get a user by ID
	// (GET /users/{id})
	GetUsersID(ctx echo.Context, id openapi_types.UUID) error
	// Update a user
	// (PUT /users/{id})
	PutUsersID(ctx echo.Context, id openapi_types.UUID) error
	// Update user role
	// (PATCH /users/{id}/role)
	PatchUsersIDRole(ctx echo.Context, id openapi_types.UUID) error
	// Get user tickets
	// (GET /users/{id}/tickets)
	GetUsersIDTickets(ctx echo.Context, id openapi_types.UUID, params GetUsersIDTicketsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategories(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCategoriesParams
	// ------------- Optional query parameter "organization_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "organization_id", ctx.QueryParams(), &params.OrganizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization_id: %s", err))
	}

	// ------------- Optional query parameter "parent_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent_id", ctx.QueryParams(), &params.ParentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent_id: %s", err))
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", ctx.QueryParams(), &params.IsActive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_active: %s", err))
	}

	// ------------- Optional query parameter "include_children" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_children", ctx.QueryParams(), &params.IncludeChildren)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_children: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategories(ctx, params)
	return err
}

// PostCategories converts echo context to params.
func (w *ServerInterfaceWrapper) PostCategories(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCategories(ctx)
	return err
}

// DeleteCategoriesID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCategoriesID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCategoriesID(ctx, id)
	return err
}

// GetCategoriesID converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategoriesID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategoriesID(ctx, id)
	return err
}

// PutCategoriesID converts echo context to params.
func (w *ServerInterfaceWrapper) PutCategoriesID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCategoriesID(ctx, id)
	return err
}

// GetCategoriesIDTickets converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategoriesIDTickets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCategoriesIDTicketsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", ctx.QueryParams(), &params.Priority)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter priority: %s", err))
	}

	// ------------- Optional query parameter "include_subcategories" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_subcategories", ctx.QueryParams(), &params.IncludeSubcategories)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_subcategories: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategoriesIDTickets(ctx, id, params)
	return err
}

// GetOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "domain" -------------

	err = runtime.BindQueryParameter("form", true, false, "domain", ctx.QueryParams(), &params.Domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", ctx.QueryParams(), &params.IsActive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_active: %s", err))
	}

	// ------------- Optional query parameter "parent_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent_id", ctx.QueryParams(), &params.ParentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent_id: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrganizations(ctx, params)
	return err
}

// PostOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) PostOrganizations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOrganizations(ctx)
	return err
}

// DeleteOrganizationsID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrganizationsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOrganizationsID(ctx, id)
	return err
}

// GetOrganizationsID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizationsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrganizationsID(ctx, id)
	return err
}

// PutOrganizationsID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOrganizationsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOrganizationsID(ctx, id)
	return err
}

// GetOrganizationsIDTickets converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizationsIDTickets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsIDTicketsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", ctx.QueryParams(), &params.Priority)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter priority: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrganizationsIDTickets(ctx, id, params)
	return err
}

// GetOrganizationsIDUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizationsIDUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsIDUsersParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrganizationsIDUsers(ctx, id, params)
	return err
}

// GetTickets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTickets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTicketsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", ctx.QueryParams(), &params.Priority)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter priority: %s", err))
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", ctx.QueryParams(), &params.CategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Optional query parameter "assignee_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "assignee_id", ctx.QueryParams(), &params.AssigneeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assignee_id: %s", err))
	}

	// ------------- Optional query parameter "organization_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "organization_id", ctx.QueryParams(), &params.OrganizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization_id: %s", err))
	}

	// ------------- Optional query parameter "author_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "author_id", ctx.QueryParams(), &params.AuthorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author_id: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTickets(ctx, params)
	return err
}

// PostTickets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTickets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTickets(ctx)
	return err
}

// DeleteTicketsID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTicketsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTicketsID(ctx, id)
	return err
}

// GetTicketsID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTicketsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTicketsID(ctx, id)
	return err
}

// PutTicketsID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTicketsID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTicketsID(ctx, id)
	return err
}

// PatchTicketsIDAssign converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTicketsIDAssign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTicketsIDAssign(ctx, id)
	return err
}

// GetTicketsIDComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetTicketsIDComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTicketsIDCommentsParams
	// ------------- Optional query parameter "include_internal" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_internal", ctx.QueryParams(), &params.IncludeInternal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_internal: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTicketsIDComments(ctx, id, params)
	return err
}

// PostTicketsIDComments converts echo context to params.
func (w *ServerInterfaceWrapper) PostTicketsIDComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTicketsIDComments(ctx, id)
	return err
}

// PatchTicketsIDStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTicketsIDStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTicketsIDStatus(ctx, id)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "organization_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "organization_id", ctx.QueryParams(), &params.OrganizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization_id: %s", err))
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", ctx.QueryParams(), &params.IsActive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_active: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersID(ctx, id)
	return err
}

// GetUsersID converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersID(ctx, id)
	return err
}

// PutUsersID converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersID(ctx, id)
	return err
}

// PatchUsersIDRole converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersIDRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUsersIDRole(ctx, id)
	return err
}

// GetUsersIDTickets converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersIDTickets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersIDTicketsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", ctx.QueryParams(), &params.Priority)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter priority: %s", err))
	}

	// ------------- Optional query parameter "relationship" -------------

	err = runtime.BindQueryParameter("form", true, false, "relationship", ctx.QueryParams(), &params.Relationship)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationship: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersIDTickets(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/categories", wrapper.GetCategories)
	router.POST(baseURL+"/categories", wrapper.PostCategories)
	router.DELETE(baseURL+"/categories/:id", wrapper.DeleteCategoriesID)
	router.GET(baseURL+"/categories/:id", wrapper.GetCategoriesID)
	router.PUT(baseURL+"/categories/:id", wrapper.PutCategoriesID)
	router.GET(baseURL+"/categories/:id/tickets", wrapper.GetCategoriesIDTickets)
	router.GET(baseURL+"/organizations", wrapper.GetOrganizations)
	router.POST(baseURL+"/organizations", wrapper.PostOrganizations)
	router.DELETE(baseURL+"/organizations/:id", wrapper.DeleteOrganizationsID)
	router.GET(baseURL+"/organizations/:id", wrapper.GetOrganizationsID)
	router.PUT(baseURL+"/organizations/:id", wrapper.PutOrganizationsID)
	router.GET(baseURL+"/organizations/:id/tickets", wrapper.GetOrganizationsIDTickets)
	router.GET(baseURL+"/organizations/:id/users", wrapper.GetOrganizationsIDUsers)
	router.GET(baseURL+"/tickets", wrapper.GetTickets)
	router.POST(baseURL+"/tickets", wrapper.PostTickets)
	router.DELETE(baseURL+"/tickets/:id", wrapper.DeleteTicketsID)
	router.GET(baseURL+"/tickets/:id", wrapper.GetTicketsID)
	router.PUT(baseURL+"/tickets/:id", wrapper.PutTicketsID)
	router.PATCH(baseURL+"/tickets/:id/assign", wrapper.PatchTicketsIDAssign)
	router.GET(baseURL+"/tickets/:id/comments", wrapper.GetTicketsIDComments)
	router.POST(baseURL+"/tickets/:id/comments", wrapper.PostTicketsIDComments)
	router.PATCH(baseURL+"/tickets/:id/status", wrapper.PatchTicketsIDStatus)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUsersID)
	router.GET(baseURL+"/users/:id", wrapper.GetUsersID)
	router.PUT(baseURL+"/users/:id", wrapper.PutUsersID)
	router.PATCH(baseURL+"/users/:id/role", wrapper.PatchUsersIDRole)
	router.GET(baseURL+"/users/:id/tickets", wrapper.GetUsersIDTickets)

}
